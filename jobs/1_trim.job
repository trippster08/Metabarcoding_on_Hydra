# /bin/sh
# ----------------Parameters---------------------- #
#$ -S /bin/sh
#$ -pe mthread 4
#$ -q sThC.q
#$ -l mres=8G,h_data=2G,h_vmem=2G
#$ -cwd
#$ -j y
#$ -N trimmed
#$ -o trimmed.log
#
# ----------------Modules------------------------- #
module load bioinformatics/cutadapt/5.0
module load tools/R/4.4.1
#
# ----------------Your Commands------------------- #
#
echo + `date` job $JOB_NAME started in $QUEUE with jobID=$JOB_ID on $HOSTNAME
echo + NSLOTS = $NSLOTS
#

#echo ${@}
num_genes=$1  # First argument is the count of genes
shift         # Remove count argument
#echo ${@}
#echo ${num_genes}
genes=("${@:1:$num_genes}")   # Extract gene names
shift ${num_genes}
#echo ${@}
data=${1}
#echo ${data}
shift
#echo ${@}
primer_files=("$@")  # Get remaining arguments (primer files)
#echo ${primer_files[@]}
#echo ${primer_files[1]}

# Determine primer structure
if [ "${#primer_files[@]}" -eq 2 ]; then
  primerF="${primer_files[0]}"
  primerR="${primer_files[1]}"
  echo "Your gene should not have potential read-through, so we are only removing primers from the 5' end of each read."
elif [ "${#primer_files[@]}" -eq 4 ]; then
  primerF="${primer_files[0]}"
  primerR="${primer_files[1]}"
  primerFrc="${primer_files[2]}"
  primerRrc="${primer_files[3]}"
  echo "Your gene has potential read-through, so we will attempt to trim primers from 3' read ends before 5'"
else
  echo "Error: Unexpected number of primer arguments (${#primer_files[@]})."
  exit 1
fi

for x in ${data}/raw/*_R1*; do
  sample=`basename ${x}`
  name=$(echo ${sample} | awk -F'_S[0-9]{1,3}_' '{print $1}') 
  namepost=`echo ${sample#*_R[1-2]*}`
  namepre=`echo ${sample%*_R[1-2]*}`

#echo ${sample}
#echo ${name}
#echo ${namepost}
#echo ${namepre}
#echo ${data}/raw/${namepre}_R2${namepost}

  if [[ ! -f ${data}/raw/${namepre}_R2${namepost} ]]; then
    echo "Error, ${namepre}_R2${namepost} can not be found in data/raw/, please make sure all read pairs exist" >> "logs/cutadapt.log"
    exit 1
  fi
# This section is if there is a single gene
  if [ "${num_genes}" -eq 1 ]; then
    if [ "${#primer_files[@]}" -eq 4 ]; then
      cutadapt \
      -a file:${primerRrc} \
      -A file:${primerFrc} \
      -e 0.2 --cores=$NSLOTS -O 10 --quiet \
      --json=logs/terminal_trim_cutadapt.json \
      -o ${data}/raw/${name}_trimmed_R1.fastq \
      -p ${data}/raw/${name}_trimmed_R2.fastq \
      ${data}/raw/${namepre}_R1${namepost} \
      ${data}/raw/${namepre}_R2${namepost}

      cutadapt \
      -g file:${primerF} \
      -G file:${primerR} \
      -e 0.2 --minimum-length 30 --cores=$NSLOTS --discard-untrimmed \
      --nextseq-trim=20 --quiet \
      --json=logs/front_trim_cutadapt.json \
      -o ${data}/working/trimmed_sequences/${genes[0]}/${name}_trimmed_R1.fastq \
      -p ${data}/working/trimmed_sequences/${genes[0]}/${name}_trimmed_R2.fastq \
      ${data}/raw/${name}_trimmed_R1.fastq \
      ${data}/raw/${name}_trimmed_R2.fastq

    rm ${data}/raw/${name}_trimmed_R1.fastq ${data}/raw/${name}_trimmed_R2.fastq
    else
      cutadapt \
      -g file:${primerF} \
      -G file:${primerR} \
      -e 0.2 --minimum-length 30 --cores=$NSLOTS --discard-untrimmed \
      --nextseq-trim=20 --quiet \
      --json=logs/front_trim_cutadapt.json \
      -o ${data}/working/trimmed_sequences/${genes[0]}/${name}_trimmed_R1.fastq \
      -p ${data}/working/trimmed_sequences/${genes[0]}/${name}_trimmed_R2.fastq \
      ${data}/raw/${namepre}_R1${namepost} \
      ${data}/raw/${namepre}_R2${namepost}
    fi
    gzip -2 \
    ${data}/working/trimmed_sequences/${name}_trimmed_R1.fastq \
    ${data}/working/trimmed_sequences/${name}_trimmed_R2.fastq 
    Rscript R_scripts/2_quality.R ${genes[@]}
# This section is if there are mutliple genes
  else
    if [ "${#primer_files[@]}" -eq 4 ]; then
      cutadapt \
      -a file:${primerRrc} \
      -A file:${primerFrc} \
      -e 0.2 --cores=$NSLOTS -O 10 --quiet \
      --json=logs/terminal_trim_cutadapt.json \
      -o ${data}/raw/${name}_trimmed_R1.fastq \
      -p ${data}/raw/${name}_trimmed_R2.fastq \
      ${data}/raw/${namepre}_R1${namepost} \
      ${data}/raw/${namepre}_R2${namepost}

      cutadapt \
      -g file:${primerF} \
      -G file:${primerR} \
      -e 0.2 --minimum-length 30 --cores=$NSLOTS --discard-untrimmed \
      --nextseq-trim=20 --quiet \
      --json=logs/front_trim_cutadapt.json \
      -o ${data}/working/trimmed_sequences/{name}/${name}_trimmed_R1.fastq \
      -p ${data}/working/trimmed_sequences/{name}/${name}_trimmed_R2.fastq \
      ${data}/raw/${name}_trimmed_R1.fastq \
      ${data}/raw/${name}_trimmed_R2.fastq

      rm ${data}/raw/${name}_trimmed_R1.fastq ${data}/raw/${name}_trimmed_R2.fastq
      for gene in ${genes[@]}; do
        gzip -2 \
        ${data}/working/trimmed_sequences/${gene}/${name}_trimmed_R1.fastq \
        ${data}/working/trimmed_sequences/${gene}/${name}_trimmed_R2.fastq
      done
    else
      cutadapt \
      -g file:${primerF} \
      -G file:${primerR} \
      -e 0.2 --minimum-length 30 --cores=$NSLOTS --discard-untrimmed \
      --nextseq-trim=20 --quiet \
      --json=logs/front_trim_cutadapt.json \
      -o ${data}/working/trimmed_sequences/{name}/${name}_trimmed_R1.fastq \
      -p ${data}/working/trimmed_sequences/{name}/${name}_trimmed_R2.fastq \
      ${data}/raw/${namepre}_R1${namepost} \
      ${data}/raw/${namepre}_R2${namepost}
      for gene in ${genes[@]}; do
        gzip -2 \
        ${data}/working/trimmed_sequences/${gene}/${name}_trimmed_R1.fastq \
        ${data}/working/trimmed_sequences/${gene}/${name}_trimmed_R2.fastq
      done
    fi
  fi
done
Rscript R_scripts/2_quality.R ${genes[@]}

echo = `date` job $JOB_NAME done